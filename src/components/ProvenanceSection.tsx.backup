'use client';

import React, { useRef, useState } from 'react';
import { Upload, X, Plus, Calendar, MapPin, FileText, Link2, Award, Hash, Clock, Users, Edit } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { uploadCOAImage } from '@/lib/firebase-services';

interface ChainEntry {
  owner: string;
  acquiredAt?: string;
  notes?: string;
}

interface ProvenanceData {
  serialNumber?: string;
  acquisitionDate?: string;
  certificateOfAuthenticity?: string;
  certificateImage?: string;
  certificateUrl?: string;
  origin?: string;
  transferMethod?: string;
  associatedDocuments?: string[];
  provenanceNotes?: string;
  chain?: ChainEntry[];
}

interface ProvenanceSectionProps {
  data: ProvenanceData;
  onChange: (data: ProvenanceData) => void;
  objectId?: string; // Optional: enable direct upload to this object's storage path
  onUploadCOA?: (file: File) => Promise<string>; // Optional custom uploader
  editable?: boolean; // Show inputs and upload only when true
  onRequestSave?: () => void; // Optional explicit save button
  onRequestEdit?: () => void; // Optional: show an Edit button in header when not editing
}

const ProvenanceSection: React.FC<ProvenanceSectionProps> = ({ data, onChange, objectId, onUploadCOA, editable = true, onRequestSave, onRequestEdit }) => {
  const [dragActive, setDragActive] = useState(false);
  const [uploading, setUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement | null>(null);

  const updateData = (updates: Partial<ProvenanceData>) => {
    onChange({ ...data, ...updates });
  };

  const addChainEntry = () => {
    const currentChain = Array.isArray(data.chain) ? data.chain : [];
    updateData({ 
      chain: [...currentChain, { owner: '', acquiredAt: '', notes: '' }] 
    });
  };

  const updateChainEntry = (index: number, updates: Partial<ChainEntry>) => {
    const currentChain = Array.isArray(data.chain) ? [...data.chain] : [];
    currentChain[index] = { ...currentChain[index], ...updates };
    updateData({ chain: currentChain });
  };

  const removeChainEntry = (index: number) => {
    const currentChain = Array.isArray(data.chain) ? [...data.chain] : [];
    currentChain.splice(index, 1);
    updateData({ chain: currentChain });
  };

  const addDocument = (doc: string) => {
    if (!doc.trim()) return;
    const current = Array.isArray(data.associatedDocuments) ? data.associatedDocuments : [];
    updateData({ associatedDocuments: [...current, doc.trim()] });
  };

  const performUpload = async (file?: File) => {
    if (!file) return;
    try {
      setUploading(true);
      let url: string | undefined;
      if (typeof onUploadCOA === 'function') {
        url = await onUploadCOA(file);
      } else if (objectId) {
        url = await uploadCOAImage(file, objectId);
      } else {
        alert('Upload available after saving the object.');
        return;
      }
      if (url) updateData({ certificateImage: url });
    } catch (e) {
      console.error('Certificate upload failed', e);
      alert('Failed to upload certificate image');
    } finally {
      setUploading(false);
    }
  };

  const removeDocument = (index: number) => {
    const current = Array.isArray(data.associatedDocuments) ? [...data.associatedDocuments] : [];
    current.splice(index, 1);
    updateData({ associatedDocuments: current });
  };

  return (
    <div className="bg-gradient-to-br from-slate-50 to-gray-50 dark:from-gray-800 dark:to-gray-900 rounded-xl space-y-6 md:space-y-8">
      {/* Header with premium badge */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-gray-300 to-gray-600 dark:from-gray-600 dark:to-gray-800 rounded-full flex items-center justify-center shadow-lg">
            <span className="w-10 h-10 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center">
              <img src="/held-seal.svg" alt="Held Seal" className="h-10 w-10" />
            </span>
          </div>
          <div>
            <h2 className="text-xl font-serif font-semibold text-gray-900 dark:text-gray-100">Provenance Documentation</h2>
            <p className="text-sm text-gray-600 dark:text-gray-400 font-mono">Held+ Premium Feature</p>
          </div>
        </div>
        <div>
          {!editable && onRequestEdit && (
            <Button variant="outline" size="sm" className="border-black dark:border-gray-300 text-black dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700" onClick={onRequestEdit}>
              <Edit className="h-4 w-4 mr-2" /> Edit
            </Button>
          )}
        </div>
      </div>

      {/* Two-column layout */}
      <div className="grid xl:grid-cols-2 gap-8">
        
        {/* Left Column - Identity & Documentation */}
        <div className="space-y-4 md:space-y-6">
          <div 
            data-provenance-section="identity"
            className={`rounded-lg shadow-sm ${!editable ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors border border-transparent hover:border-gray-200 dark:hover:border-gray-600 p-4' : ''}`} 
            onClick={!editable ? onRequestEdit : undefined}
          >
            <h3 className="font-serif text-xl text-gray-900 dark:text-gray-100 mb-3 md:mb-4 flex items-center gap-2">
              Object Identity
              {!editable && onRequestEdit && (
                <Edit className="h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors" />
              )}
            </h3>
            
            {editable ? (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Serial Number</label>
                  <input
                    type="text"
                    value={data.serialNumber || ''}
                    onChange={(e) => updateData({ serialNumber: e.target.value })}
                    placeholder="Enter serial number or unique identifier"
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Origin</label>
                  <div className="relative">
                    <MapPin className="absolute left-3 top-3 h-4 w-4 text-gray-400 dark:text-gray-500" />
                    <input
                      type="text"
                      value={data.origin || ''}
                      onChange={(e) => updateData({ origin: e.target.value })}
                      placeholder="Place of manufacture or origin"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Acquisition Date</label>
                  <div className="relative">
                    <Calendar className="absolute left-3 top-3 h-4 w-4 text-gray-400 dark:text-gray-500" />
                    <input
                      type="date"
                      value={data.acquisitionDate || ''}
                      onChange={(e) => updateData({ acquisitionDate: e.target.value })}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Transfer Method</label>
                  <select
                    value={data.transferMethod || ''}
                    onChange={(e) => updateData({ transferMethod: e.target.value })}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors"
                  >
                    <option value="">Select method</option>
                    <option value="purchase">Purchase</option>
                    <option value="gift">Gift</option>
                    <option value="inheritance">Inheritance</option>
                    <option value="trade">Trade</option>
                    <option value="commission">Commission</option>
                    <option value="auction">Auction</option>
                    <option value="found">Found</option>
                    <option value="other">Other</option>
                  </select>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {data.serialNumber && (
                  <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                      <span className="text-blue-600 dark:text-blue-400 text-sm font-semibold">#</span>
                    </div>
                    <div className="flex-1">
                      <div className="text-sm text-gray-500 dark:text-gray-400">Serial Number</div>
                      <div className="font-mono text-gray-900 dark:text-gray-100">{data.serialNumber}</div>
                    </div>
                  </div>
                )}

                {data.origin && (
                  <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center">
                      <MapPin className="h-4 w-4 text-green-600 dark:text-green-400" />
                    </div>
                    <div className="flex-1">
                      <div className="text-sm text-gray-500 dark:text-gray-400">Origin</div>
                      <div className="text-gray-900 dark:text-gray-100">{data.origin}</div>
                    </div>
                  </div>
                )}

                {data.acquisitionDate && (
                  <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center">
                      <Calendar className="h-4 w-4 text-purple-600 dark:text-purple-400" />
                    </div>
                    <div className="flex-1">
                      <div className="text-sm text-gray-500 dark:text-gray-400">Acquisition Date</div>
                      <div className="font-mono text-gray-900 dark:text-gray-100">
                        {new Date(data.acquisitionDate).toLocaleDateString('en-US', { 
                          month: 'long', 
                          day: 'numeric', 
                          year: 'numeric' 
                        })}
                      </div>
                    </div>
                  </div>
                )}

                {data.transferMethod && (
                  <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="w-8 h-8 bg-amber-100 dark:bg-amber-900 rounded-full flex items-center justify-center">
                      <span className="text-amber-600 dark:text-amber-400 text-sm font-semibold">↔</span>
                    </div>
                    <div className="flex-1">
                      <div className="text-sm text-gray-500 dark:text-gray-400">Transfer Method</div>
                      <div className="text-gray-900 dark:text-gray-100 capitalize">{data.transferMethod}</div>
                    </div>
                  </div>
                )}

                {!data.serialNumber && !data.origin && !data.acquisitionDate && !data.transferMethod && (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                      <span className="text-gray-400 dark:text-gray-500 text-lg">📋</span>
                    </div>
                    <p className="text-sm">No identity information added yet</p>
                    <p className="text-xs text-gray-400 dark:text-gray-500">Add serial numbers, origin, and acquisition details</p>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Certificate of Authenticity */}
          <div 
            data-provenance-section="certificate"
            className={`rounded-lg shadow-sm ${!editable ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors border border-transparent hover:border-gray-200 dark:hover:border-gray-600 p-4' : ''}`} 
            onClick={!editable ? onRequestEdit : undefined}
          >
            <h3 className="font-serif text-xl text-gray-900 dark:text-gray-100 mb-3 mt-10 md:mb-4 flex items-center gap-2">
              <Award className="h-4 w-4 text-gray-500 dark:text-gray-400" />
              Certificate of Authenticity
              {!editable && onRequestEdit && (
                <Edit className="h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors ml-auto" />
              )}
            </h3>
            
            {editable ? (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Certificate Description</label>
                  <textarea
                    value={data.certificateOfAuthenticity || ''}
                    onChange={(e) => updateData({ certificateOfAuthenticity: e.target.value })}
                    placeholder="Describe the certificate or authentication details"
                    rows={3}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors resize-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Certificate URL or Reference</label>
                  <div className="relative">
                    <Link2 className="absolute left-3 top-3 h-4 w-4 text-gray-400 dark:text-gray-500" />
                    <input
                      type="url"
                      value={data.certificateUrl || ''}
                      onChange={(e) => updateData({ certificateUrl: e.target.value })}
                      placeholder="https://... or reference number"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors"
                    />
                  </div>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {data.certificateOfAuthenticity && (
                  <div className="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="flex items-start gap-3">
                      <div className="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center flex-shrink-0">
                        <Award className="h-4 w-4 text-green-600 dark:text-green-400" />
                      </div>
                      <div className="flex-1">
                        <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">Certificate Description</div>
                        <div className="text-gray-900 dark:text-gray-100 text-sm leading-relaxed">{data.certificateOfAuthenticity}</div>
                      </div>
                    </div>
                  </div>
                )}

                {data.certificateUrl && (
                  <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                      <Link2 className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                    </div>
                    <div className="flex-1">
                      <div className="text-sm text-gray-500 dark:text-gray-400">Certificate Reference</div>
                      <a 
                        href={data.certificateUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 dark:text-blue-400 hover:underline text-sm break-all"
                      >
                        {data.certificateUrl}
                      </a>
                    </div>
                  </div>
                )}

                {!data.certificateOfAuthenticity && !data.certificateUrl && (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                      <Award className="h-6 w-6 text-gray-400 dark:text-gray-500" />
                    </div>
                    <p className="text-sm">No certificate information added yet</p>
                    <p className="text-xs text-gray-400 dark:text-gray-500">Add authentication details and references</p>
                  </div>
                )}
              </div>
            )}

              {/* Certificate Image Upload */}
              <div >
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Certificate Image</label>
                {data.certificateImage ? (
                  <div className="flex items-center gap-3">
                    <img src={data.certificateImage} alt="Certificate" className="h-16 w-auto border border-gray-300 dark:border-gray-600 rounded" />
                    {editable && <Button variant="outline" size="sm" onClick={() => updateData({ certificateImage: '' })}>Remove</Button>}
                  </div>
                ) : (
                  <div 
                    className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                      editable ? (dragActive ? 'border-amber-400 bg-amber-50 dark:bg-amber-900/20' : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500') : 'border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 opacity-60'
                    }`}
                    onDragOver={(e) => { if (!editable) return; e.preventDefault(); setDragActive(true); }}
                    onDragLeave={() => { if (!editable) return; setDragActive(false); }}
                    onDrop={(e) => {
                      if (!editable) return;
                      e.preventDefault();
                      setDragActive(false);
                      const file = Array.from(e.dataTransfer.files || []).find(f => f.type.startsWith('image/'));
                      performUpload(file);
                    }}
                  >
                    <Upload className="h-8 w-8 text-gray-400 dark:text-gray-500 mx-auto mb-2" />
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">Drop certificate image here, or</p>
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={(e) => {
                        const f = (e.target.files || [])[0];
                        performUpload(f);
                        if (e.currentTarget) e.currentTarget.value = '';
                      }}
                    />
                    <Button variant="outline" size="sm" disabled={uploading || !editable} onClick={() => fileInputRef.current?.click()}>
                      {uploading ? 'Uploading…' : 'Choose File'}
                    </Button>
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">PNG, JPG up to 10MB</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Right Column - Chain & Documents */}
        <div className="space-y-4 md:space-y-6">
          
          {/* Chain of Ownership */}
          <div 
            data-provenance-section="chain"
            className={`shadow-sm ${!editable ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors border border-transparent hover:border-gray-200 dark:hover:border-gray-600 rounded-lg p-4' : ''}`} 
            onClick={!editable ? onRequestEdit : undefined}
          >
            <div className="flex items-center justify-between mb-3 md:mb-4">
              <h3 className="font-serif text-xl text-gray-900 dark:text-gray-100 flex items-center gap-2">
                <Users className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                Chain of Ownership
                {!editable && onRequestEdit && (
                  <Edit className="h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors ml-2" />
                )}
              </h3>
              {editable && (
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={addChainEntry}
                  className="text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800 hover:bg-amber-50 dark:hover:bg-amber-900/20"
                >
                  <Plus className="h-3 w-3 mr-1" />
                  Add Owner
                </Button>
              )}
            </div>

            <div className="space-y-3">
              {(Array.isArray(data.chain) ? data.chain : []).map((entry, index) => (
                <div key={index} className={`rounded-lg p-4 space-y-3 transition-all duration-200 ${
                  editable 
                    ? 'bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700' 
                    : 'bg-white dark:bg-gray-900 border border-gray-100 dark:border-gray-800 shadow-sm hover:shadow-md'
                }`}>
                  <div className="flex items-center justify-between">
                    <span className="text-xs font-mono text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">Owner #{index + 1}</span>
                    {editable && (
                      <button
                        onClick={() => removeChainEntry(index)}
                        className="text-gray-400 dark:text-gray-500 hover:text-red-500 transition-colors"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    )}
                  </div>
                  
                  {editable ? (
                    <div className="grid gap-3">
                      <input
                        type="text"
                        value={entry.owner || ''}
                        onChange={(e) => updateChainEntry(index, { owner: e.target.value })}
                        placeholder="Owner name"
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm"
                      />
                      
                      <div className="grid grid-cols-2 gap-3">
                        <input
                          type="date"
                          value={entry.acquiredAt || ''}
                          onChange={(e) => updateChainEntry(index, { acquiredAt: e.target.value })}
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm"
                        />
                        <input
                          type="text"
                          value={entry.notes || ''}
                          onChange={(e) => updateChainEntry(index, { notes: e.target.value })}
                          placeholder="Notes"
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm"
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">
                          {entry.owner?.charAt(0)?.toUpperCase() || '?'}
                        </div>
                        <div className="flex-1">
                          <div className="font-medium text-gray-900 dark:text-gray-100">
                            {entry.owner || 'Unknown Owner'}
                          </div>
                          {entry.notes && (
                            <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                              {entry.notes}
                            </div>
                          )}
                        </div>
                        {entry.acquiredAt && (
                          <div className="text-right">
                            <div className="text-sm font-mono text-gray-500 dark:text-gray-400">
                              {new Date(entry.acquiredAt).toLocaleDateString('en-US', { 
                                month: '2-digit', 
                                day: '2-digit', 
                                year: 'numeric' 
                              })}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ))}

              {(!data.chain || data.chain.length === 0) && (
                <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                  <Users className="h-8 w-8 mx-auto mb-2 text-gray-300 dark:text-gray-600" />
                  <p className="text-sm">No ownership history added yet</p>
                  <p className="text-xs text-gray-400 dark:text-gray-500">Track the complete ownership chain of this object</p>
                </div>
              )}
            </div>
          </div>

          {/* Associated Documents */}
          <div className={`${!editable ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors border border-transparent hover:border-gray-200 dark:hover:border-gray-600 rounded-lg p-4' : ''}`} onClick={!editable ? onRequestEdit : undefined}>
            <h3 className="font-serif text-xl text-gray-900 dark:text-gray-100 mb-3 md:mb-4 flex items-center gap-2">
              <FileText className="h-4 w-4 text-gray-500 dark:text-gray-400" />
              Associated Documents
              {!editable && onRequestEdit && (
                <Edit className="h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors ml-auto" />
              )}
            </h3>

            {editable ? (
              <div className="space-y-3">
                <div className="flex gap-2">
                  <input
                    type="url"
                    placeholder="Add document URL or reference"
                    className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        const target = e.target as HTMLInputElement;
                        addDocument(target.value);
                        target.value = '';
                      }
                    }}
                  />
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={(e) => {
                      const input = (e.target as HTMLElement).parentElement?.querySelector('input') as HTMLInputElement;
                      if (input) {
                        addDocument(input.value);
                        input.value = '';
                      }
                    }}
                  >
                    Add
                  </Button>
                </div>

                {(Array.isArray(data.associatedDocuments) ? data.associatedDocuments : []).map((doc, index) => (
                  <div key={index} className="flex items-center gap-2 bg-gray-50 dark:bg-gray-800 rounded-md p-2">
                    <Link2 className="h-3 w-3 text-gray-400 dark:text-gray-500 flex-shrink-0" />
                    <span className="text-sm text-gray-700 dark:text-gray-300 truncate flex-1">{doc}</span>
                    <button
                      onClick={() => removeDocument(index)}
                      className="text-gray-400 dark:text-gray-500 hover:text-red-500 transition-colors flex-shrink-0"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="space-y-3">
                {(Array.isArray(data.associatedDocuments) ? data.associatedDocuments : []).map((doc, index) => (
                  <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-750 transition-colors">
                    <div className="w-8 h-8 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center flex-shrink-0">
                      <FileText className="h-4 w-4 text-orange-600 dark:text-orange-400" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="text-sm text-gray-500 dark:text-gray-400">Document #{index + 1}</div>
                      <a 
                        href={doc} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 dark:text-blue-400 hover:underline text-sm break-all"
                      >
                        {doc}
                      </a>
                    </div>
                  </div>
                ))}

                {(!data.associatedDocuments || data.associatedDocuments.length === 0) && (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                      <FileText className="h-6 w-6 text-gray-400 dark:text-gray-500" />
                    </div>
                    <p className="text-sm">No documents attached yet</p>
                    <p className="text-xs text-gray-400 dark:text-gray-500">Add certificates, receipts, or references</p>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Provenance Notes */}
          <div className={`${!editable ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors border border-transparent hover:border-gray-200 dark:hover:border-gray-600 rounded-lg p-4' : ''}`} onClick={!editable ? onRequestEdit : undefined}>
            <h3 className="font-serif text-xl text-gray-900 dark:text-gray-100 mb-3 md:mb-4 flex items-center gap-2">
              <FileText className="h-4 w-4 text-gray-500 dark:text-gray-400" />
              Provenance Notes
              {!editable && onRequestEdit && (
                <Edit className="h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors ml-auto" />
              )}
            </h3>
            
            {editable ? (
              <textarea
                value={data.provenanceNotes || ''}
                onChange={(e) => updateData({ provenanceNotes: e.target.value })}
                placeholder="Additional notes about the object's history, significance, or provenance details..."
                rows={6}
                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-colors resize-none"
              />
            ) : (
              <div>
                {data.provenanceNotes ? (
                  <div className="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="flex items-start gap-3">
                      <div className="w-8 h-8 bg-indigo-100 dark:bg-indigo-900 rounded-full flex items-center justify-center flex-shrink-0">
                        <FileText className="h-4 w-4 text-indigo-600 dark:text-indigo-400" />
                      </div>
                      <div className="flex-1">
                        <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">Provenance Notes</div>
                        <div className="text-gray-900 dark:text-gray-100 text-sm leading-relaxed whitespace-pre-wrap">{data.provenanceNotes}</div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                      <FileText className="h-6 w-6 text-gray-400 dark:text-gray-500" />
                    </div>
                    <p className="text-sm">No provenance notes added yet</p>
                    <p className="text-xs text-gray-400 dark:text-gray-500">Add additional history and significance details</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        {editable && (
          <div className="xl:col-span-2 flex justify-end">
            {onRequestSave && (
              <Button onClick={onRequestSave} className="bg-black dark:bg-white text-white dark:text-black px-5 py-2">Save Provenance</Button>
            )}
          </div>
        )}
      </div>
      </div>
      {/* Footer with save reminder */}
      <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
        <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
          <Clock className="h-4 w-4" />
          <span>Provenance data is automatically saved when you save the object</span>
        </div>
      </div>
    </div>
  );
};

export default ProvenanceSection;